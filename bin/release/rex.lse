! ___ NAME ___      defines token NAME
! ___ NAME ___ MENU defines a token list, where you have to choose one 
! {name}            indicates that token NAME will replaced, if expanded
! [{name}]          indicates an optional token, CTRL-M makes it mandatory, CTRL-D deletes the token
! {name}...         indicates that here a token will be inserted, if expanded (optional repeated tokens)
! {name}..;         indicates that here a token and a newline will be inserted, if expanded (optional repeated tokens)
! [{name}]          indicates an optional token, CTRL-M makes it mandatory, CTRL-D deletes the token
! [{name}]...       indicates a repeated optional token
! [{name}]..;       indicates a repeated optional token on a new line
! 
! a MENU list consists of a list separated by the first character on the (first) line
! 
! a token is replaces by rge lines of text, defining the token
! 
! How to:
! create source with 1 line: PROGRAM
! put cursor on text and press ctrl-E  
! to expand a token: ctrl-E
! to delete a token: ctrl-D
! to include an optional token: ctrl-I
! to jump to next token: ctrl-N
! 
__ PROGRAM __ 
/* [{comment}] */
{statement}..;
exit [{expression}]
[{procedure}]..;
__ STATEMENT __ MENU
|{assignment}|{if}|{do}|{call}|{select}|{parse}|{pull}|{push}|{queue}|{arg}|{say}|{address}|{drop}|{interpret}|Iterate|Leave|{exit}|{return}|Nop|{signal}|{trace}
__ ASSIGNMENT __ 
{variable} = {expression}
__ EXPRESSION __ MENU
|{operand}|{operand} [{oper} {expression}]|{operand} [{oper} {function}] 
__ LOGICAL EXPRESSION __ MENU 
|{log operand}|{logical comparison}
__ LOGICAL COMPARISON __    
{expression} {log op} {expression} [ {log connector} {expression} {log op} {expression}]... 
__ LOG CONNECTOR __ MENU
*&*|*
__ OPER __ MENU
|+|-| |*|/|%|//|**
__ LOG OP __ MENU
!>!>=!<!<=!=!^=!&!|
__ IF __ 
If {logical expression} then do
   {statement}..;
end /* then */
[else do
   {statement}..;
end /* else */]
__ DO __ 
do [{loop}] [{conditional}]
   {statement}
end /* do */
__ LOOP __ 
{variable}={expression} [to {expression}] [by {expression}] [for {expression}]  
__ CONDITIONAL __ MENU
|while {logical expression}|until {logical expression} 
__ CALL __ 
call {variable}[({parameter}[, {parameter}]...)]
__ PARAMETER __ MENU
|{operand}|{expression}
__ RETURN __ 
return [{operand}]
__ PARSE __ 
parse [upper] {parse spec}
__ PARSE SPEC __ MENU
|{pull}|{parse arg}|{parse value}|{parse var}
__ PULL __ 
pull {template}
__ PARSE ARG __ 
arg {template}
__ PARSE VAR __ 
var {variable} {template}
__ PARSE VALUE __ 
value {operand} with {template}
__ TEMPLATE __ 
{element}...
__ ELEMENT __ MENU
|{variable} |. |{position} |"{constant delimiter}" |({variable delimiter}) | 
__ ADDRESS __ 
Address "{string}"
__ DROP __ 
Drop {Drop variable}[ {Drop variable}]...
__ COMPOUND VARIABLE __ MENU
|{variable}.|{variable}
__ SELECT __ 
Select 
   {When}...
   [{otherwise}]
end /* select */
__ WHEN __ 
when {logical expression} then do
   {statement}...
end /* when */
__ OTHERWISE __ 
Otherwise do
   {statement}..;
end /* otherwise */
__ SIGNAL __ 
Signal {signal type}
__ SIGNAL TYPE__ MENU
|{label}|{novalue}
__ NOVALUE __ 
on novalue
__ PUSH __ 
Push {expression}
__ QUEUE __ 
Queue {expression}
__ INTERPRET __ 
Interpret {expression}
__ SAY __ 
Say {expression}
__ TRACE __ 
Trace {trace option}
__ TRACE OPTION __ MENU
|N|R|I
__ FUNCTION __ MENU
|ABBREV({keyword},{info}[,{min length}])  
|ABS({number})    
|B2X({string})    
|CHARIN({filename}[,{start}[,{length}]])  
|CHAROUT({filename}[,{start}[,{length}]])  
|CHARS({filename})   
|COMPARE({string},{string}[,{pad}])  
|COPIES({string},{n})   
|C2X({string})    
|DATATYPE({string}[,{type}]) 
|DATE({option})   
|DELSTR({string},{n},{length})  
|FORMAT({number},{before},{after})  
|INSERT({string},{target},{n},{length},{pad})  
|LASTPOS({needle},{haystack},{start})  
|LEFT({string},{n})   
|LENGTH({string})  
|LINEIN({filename}[,{line},{count}])  
|LINEOUT({filename},{string}[,{line}])  
|LINES({filename})   
|OVERLAY({string},{target},{n},{length},{pad})  
|POS({needle},{haystack}[,{start}])    
|QUEUED()  
|RANDOM({min},{max}[,{seed}])  
|REVERSE({string})  
|REGEXP({stem},{value},{regexp})   
|RIGHT({string},{n})   
|SIGN({number})   
|STREAM({filename},{op}[,{command}])  
|STRIP({string},{option},{char})   
|SUBSTR({string},{start}[,{count}])  
|TIME({option})   
|TRACE()   
|TRANSLATE({string},{output},{input}) 
|TRUNC({number},{n})   
|VALUE({name},{value})   
|VERIFY({string},{ref string},{option},{start})  
|WORD({string},{n})   
|WORDS({string})   
|XRANGE({startchar},{endchar})  
|X2B({string})    
|X2C({string})    
__ PROCEDURE __ 
{variable} : proc [expose {exposelist}]
{statement}..;
return [{expression}]
__ XXXXXXXXXX __